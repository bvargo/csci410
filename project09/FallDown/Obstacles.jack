// a queue of obstacles, using the linked-list functionality of obstacles
class Obstacles {
   // the head obstacle
   field Obstacle head;

   // construct the collection of obstacles
   constructor Obstacles new(Obstacle hhead) {
      let head = hhead;

      return this;
   }

   // desconstruct this object
   method void dispose() {
      var Obstacle a;
      var Obstacle b;

      let a = head;
      let b = head;

      while(~(a = null)) {
         let b = a.getNext();
         do a.dispose();
         let a = b;
      }

      do Memory.deAlloc(this);
      return;
   }

   // add an obstacle ot the queue
   method void add(Obstacle toAdd) {
      var Obstacle pointer;

      if(head = null) {
         let head = toAdd;
      }
      else {
         let pointer = head;
         while(~(pointer.getNext() = null)) {
            let pointer = pointer.getNext();
         }
         do pointer.setNext(toAdd);
      }

      return;
   }

   // remove the head obstacle from the queue
   // can remove null if the queue size is 0
   method Obstacle remove() {
      var Obstacle temp;

      if(head = null)
      {
         return null;
      }
      else
      {
         let temp = head;
         let head = head.getNext();
         return temp;
      }
   }

   // draws/undraws all of the obstacles
   method void draw(boolean draw) {
      var Obstacle pointer;
      let pointer = head;

      while(~(pointer = null)) {
         do pointer.draw(draw);
         let pointer = pointer.getNext();
      }

      return;
   }

   // moves all of the obstacles up
   method void moveUp() {
      var Obstacle pointer;
      var boolean remove;

      // undraw everything
      do draw(false);

      // move everything up
      let pointer = head;
      while(~(pointer = null)) {
         do pointer.moveUp();
         let pointer = pointer.getNext();
      }

      // remove obstacles that are off the screen
      // this would be much simpler in a sane language where conditions short
      // circuit, but jack is not sane
      let remove = true;
      while(remove) {
         if(head = null) {
            let remove = false;
         }
         else {
            if(head.getY2() < 0) {
               do remove();
            }
            else {
               let remove = false;
            }
         }
      }

      // draw everything
      do draw(true);

      return;
   }

   // get the first obstacle
   method Obstacle getHead() {
      return head;
   }
}
