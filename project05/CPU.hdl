// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

   IN inM[16],          // M value input  (M = contents of RAM[A])
      instruction[16],  // Instruction for execution
      reset;            // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

   OUT outM[16],        // M value output
       writeM,          // Write into M?
       addressM[15],    // Address in data memory (of M)
       pc[15];          // address of next instruction

   PARTS:
      // mux to load the instruction or ALU output into A
      // if the MSB of the instruction is 0, then a constant is loaded into A
      // from the instruction; if the MSB of the instruction is 1, then it is
      // a C instruction, so the output (if it is saved) comes from the ALU
      Mux16(a=instruction, b=aluOut, sel=instruction[15], out=instructionOrALU);

      // a register
      // need to store into a A if there is an A instruciton or the
      // destination of a C instruction includes the A register
      Not(in=instruction[15], out=aInstruction);
      Or(a=aInstruction, b=instruction[5], out=loadA);
      ARegister(in=instructionOrALU, load=loadA, out=A, out[0..14]=addressM);

      // mux to choose between A and M for the A/M input to the ALU
      Mux16(a=A, b=inM, sel=instruction[12], out=AM);

      // d register
      // if the destination is D ([4]) and it is a C instruction ([15]), write
      // to D
      And(a=instruction[15], b=instruction[4], out=loadD);
      DRegister(in=aluOut, load=loadD, out=D);

      // if the destination is M ([3]) and it is a C instruction ([15]), write
      // to memory
      And(a=instruction[3], b=instruction[15], out=writeM);

      // ALU
      // contorl bits align with C instruction
      ALU(x=D, y=AM,
         zx=instruction[11],
         nx=instruction[10],
         zy=instruction[9],
         ny=instruction[8],
         f=instruction[7],
         no=instruction[6],
         out=aluOut, out=outM, zr=zero, ng=negative);

      // program counter
      PC(in=A, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

      // jump logic
      // test for jump conditions for greater than, equal to, and negative
      And(a=instruction[0], b=positive, out=positiveJump);
      And(a=instruction[1], b=zero, out=zeroJump);
      And(a=instruction[2], b=negative, out=negativeJump);
      // supporting logic for positive jump
      Or(a=negative, b=zero, out=notPositive);
      Not(in=notPositive, out=positive);
      // figure out if there is a jump
      Or(a=positiveJump, b=zeroJump, out=jumpNonNegative);
      Or(a=jumpNonNegative, b=negativeJump, out=jump);
      // make sure this is a C instruction before telling the PC to load
      And(a=jump, b=instruction[15], out=loadPC);
}
